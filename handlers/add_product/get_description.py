from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from filters.id_filter import IsDescriptionMessage
from keyboards.admin_keyboards import cancel_keyboard, go_to_keyboard
from states.add_product import AddProductStates

router = Router()


@router.callback_query(Text('to_description'), AddProductStates.getPhoto)
async def to_description_call(call: CallbackQuery, state: FSMContext):
    # —á–∏—Å—Ç–∏–º —á–∞—Ç
    data = await state.get_data()
    await call.message.delete()
    await data['to_photo_temp'].delete()

    await state.set_state(AddProductStates.getDescription)

    answer_msg = await call.message.answer(
        text=f'üìù –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä—É',
        reply_markup=cancel_keyboard(data='get_description_temp', skip_to="to_price")
    )

    await state.update_data(to_description_temp=answer_msg)


@router.message(F.text, AddProductStates.getDescription)
async def get_description(msg: Message, state: FSMContext):
    # —á–∏—Å—Ç–∏–º —á–∞—Ç
    data = await state.get_data()
    await msg.delete()
    try:
        await data['get_description_temp'].delete()
    except KeyError:
        pass

    # –ø–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    try:
        answer_msg = await msg.answer(
            text=f"*–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ*:\n`{msg.text}`\n"
                 "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å—Ç–∞—Ä–æ–µ",
            reply_markup=go_to_keyboard(callback_data='to_price', text='–î–∞–ª–µ–µ  üëü'),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except TelegramBadRequest:
        await msg.answer(
            text='üò¨ –ò–∑–≤–∏–Ω–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É',
            reply_markup=cancel_keyboard()
        )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(product_description=msg.text, get_description_temp=answer_msg, description_message_temp=msg)


@router.edited_message(IsDescriptionMessage(), AddProductStates.getDescription)
async def edit_description_message(msg: Message, data: dict):

    try:
        await data['get_description_temp'].edit_text(
            text=f"*–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ*:\n`{msg.text}`\n"
                 "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Å—Ç–∞—Ä–æ–µ",
            reply_markup=go_to_keyboard(callback_data='to_price', text='–î–∞–ª–µ–µ  üëü'),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except TelegramBadRequest:
        await msg.answer(
            text='üò¨ –ò–∑–≤–∏–Ω–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É',
            reply_markup=cancel_keyboard()
        )